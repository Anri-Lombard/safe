{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":":safety_vest: `SAFE`  Sequential Attachment-based Fragment Embedding (SAFE) is a novel molecular line notation that represents molecules as an unordered sequence of fragment blocks to improve molecule design using generative models. <p>        Paper    |          Docs    |        \ud83e\udd17 Model    </p>  ---   ## \ud83c\udd95 News - \\[**August 2023**\\] We've released xxx   ## Overview of SAFE  SAFE is a   ### Installation  You can install `safe` using pip.  <pre><code>pip install safe-smiles\n</code></pre>  Alternatively clone this repo, install the dependencies, install `safe` locally and you are good to go:   <pre><code>git clone https://github.com/maclandrol/safe.git\ncd safe\nmamba env create -f env.yml -n \"safe-space\" # :)\npip install -e .\n</code></pre>  `safe` mostly depends on [transformers](https://huggingface.co/docs/transformers/index) and [datasets](https://huggingface.co/docs/datasets/index). Please see the [env.yml](./env.yml) file for a complete list of dependencies.   ### Datasets and Models  We provided a pretained GPT2 model (50M parameters) using the SAFE molecular representation that has been trained on 1.1 billion molecules from Unichem (0.1B) + Zinc (1B):   - *Safe-1.1B-dataset* [maclandrol/safe-50M]() - *Safe-50M* [maclandrol/safe-50M]()   ### Usage  To get started with SAFE, please see the tutorials:  - xxx - xxx    ## References If you use this repository, please cite the following related paper:  ``` @article{,   title={Gotta be SAFE: a new framework for molecular design.},   author={},   journal={},   year={2023} } ````  ## License  Please note that all data and model weights of **SAFE** are exclusively licensed for research purposes. The accompanying dataset is licensed under CC BY 4.0, which permits solely non-commercial usage. See [DATA_LICENSE](DATA_LICENSE) for details.  This code base is licensed under the Apache-2.0 license. See [LICENSE](LICENSE) for details."},{"location":"license.html","title":"License","text":"<pre><code>Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023 Emmanuel Noutahi\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"tutorials/getting-started.html","title":"Getting Started with SAFE","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n</pre> %load_ext autoreload %autoreload 2"},{"location":"tutorials/getting-started.html#getting-started-with-safe","title":"Getting Started with SAFE\u00b6","text":"<p>The SAFE encoding format is a rewriting of SMILES to ensure that any molecule can be written as a sequence of fragments where atoms or tokens corresponding to given fragments form a substring(ontiguous sequence) in the line notation representation.</p> <p>SAFE addresses some of the limitation of SMILES strings when it comes to generative design:</p> SAFE Others <pre>+ native support for (sub)structure-constrained design\n</pre> <pre>- different generative models for different generative tasks \n- extensive substructure matching for filtering after generation\n- multiple steps generative process (e.g Liao et al. 2023, 10.1093/bioinformatics/btac814)\n- graph based approaches with their limitations\n</pre> <pre>+ any molecule generation as a simple NLP task (sequence completion or mask filling)\n+ a single autoregressive sequence model for both linker generation and scaffold decoration.\n</pre> <pre>- complex training and decoding schemes for scaffold-constrained generation (e.g Ar\u00fas-Pous et al. 2020, 10.1186/s13321-020-00441-8)\n- complex sampling algorithms for scaffold-constrained generation (e.g Langevin et al. 2020, 10.1021/acs.jcim.0c01015)\n</pre> <pre>+ SAFE strings are SMILES strings\n</pre> <pre>- requires a different chemical language (e.g Krenn et al. 2022, 10.1016/j.patter.2022.100588)\n</pre> In\u00a0[2]: Copied! <pre>import safe as sf\nimport datamol as dm\n\ncelecoxib = \"Cc1ccc(-c2cc(C(F)(F)F)nn2-c2ccc(S(N)(=O)=O)cc2)cc1\"\ncelecoxib_mol = dm.to_mol(celecoxib)\ndisplay(dm.to_image(celecoxib_mol))\n</pre> import safe as sf import datamol as dm  celecoxib = \"Cc1ccc(-c2cc(C(F)(F)F)nn2-c2ccc(S(N)(=O)=O)cc2)cc1\" celecoxib_mol = dm.to_mol(celecoxib) display(dm.to_image(celecoxib_mol)) In\u00a0[3]: Copied! <pre>safe_str = sf.encode(celecoxib_mol)\nprint(safe_str)\nprint(f\"Representation using {len(safe_str.split('.'))} fragments\")\n</pre> safe_str = sf.encode(celecoxib_mol) print(safe_str) print(f\"Representation using {len(safe_str.split('.'))} fragments\") <pre>c14ccc(S(N)(=O)=O)cc1.Cc1ccc3cc1.c13cc5nn14.C5(F)(F)F\nRepresentation using 4 fragments\n</pre> <p>!!! info \"SAFE string are SMILES\"</p> <pre><code>Any SAFE string is a valid SMILES and can be read by RDKit without any decoding trick.</code></pre> In\u00a0[4]: Copied! <pre>reconstructed = dm.to_mol(safe_str)\ndisplay(dm.to_image(reconstructed))\ndm.same_mol(celecoxib_mol, reconstructed)\n</pre> reconstructed = dm.to_mol(safe_str) display(dm.to_image(reconstructed)) dm.same_mol(celecoxib_mol, reconstructed) Out[4]: <pre>True</pre> <p>!!! info \"SAFE supports randomization\"</p> <pre><code>You can generate randomized SAFE strings.</code></pre> In\u00a0[5]: Copied! <pre>random_safe_str = sf.encode(celecoxib_mol, canonical=False, randomize=True)\nprint(random_safe_str)\nreconstructed = dm.to_mol(safe_str)\ndm.same_mol(celecoxib_mol, reconstructed)\n</pre> random_safe_str = sf.encode(celecoxib_mol, canonical=False, randomize=True) print(random_safe_str) reconstructed = dm.to_mol(safe_str) dm.same_mol(celecoxib_mol, reconstructed) <pre>C(F)(F)(F)4.c1cc(S(=O)(=O)N)ccc12.c13ccc(C)cc1.n12nc4cc13\n</pre> Out[5]: <pre>True</pre> <p>!!! info \"Fragment order in SAFE does not matter\"</p> <pre><code>Any permutation of the fragment order in a SAFE string preserve the molecule identity</code></pre> In\u00a0[6]: Copied! <pre>import numpy as np\nfragments = safe_str.split(\".\")\nrandomized_fragment_safe_str = np.random.permutation(fragments).tolist()\nrandomized_fragment_safe_str = \".\".join(randomized_fragment_safe_str)\nprint(randomized_fragment_safe_str, safe_str)\ndm.same_mol(celecoxib_mol, randomized_fragment_safe_str)\n</pre> import numpy as np fragments = safe_str.split(\".\") randomized_fragment_safe_str = np.random.permutation(fragments).tolist() randomized_fragment_safe_str = \".\".join(randomized_fragment_safe_str) print(randomized_fragment_safe_str, safe_str) dm.same_mol(celecoxib_mol, randomized_fragment_safe_str) <pre>c14ccc(S(N)(=O)=O)cc1.c13cc5nn14.Cc1ccc3cc1.C5(F)(F)F c14ccc(S(N)(=O)=O)cc1.Cc1ccc3cc1.c13cc5nn14.C5(F)(F)F\n</pre> Out[6]: <pre>True</pre> <p>!!! info \"Use your own slicing logic\"</p> <pre><code>By default SAFE strings are generated using `BRICS`, however, the following are supported:\n* [Hussain-Rea (`hr`)](https://pubs.acs.org/doi/10.1021/ci900450m)\n* [RECAP (`recap`)](https://pubmed.ncbi.nlm.nih.gov/9611787/)\n* [RDKit's MMPA (`mmpa`)](https://www.rdkit.org/docs/source/rdkit.Chem.rdMMPA.html)\n* Any possible attachment points (`attach`)\n    \nFurthermore, you can also provide your own slicing algorithm, which should return a pair of atoms corresponding to the bonds to break. </code></pre> In\u00a0[7]: Copied! <pre>safe_str = sf.encode(celecoxib_mol, canonical=False, slicer=\"attach\")\nprint(safe_str)\nprint(f\"Representation using {len(safe_str.split('.'))} fragments\")\ndisplay(dm.to_image(safe_str))\n</pre> safe_str = sf.encode(celecoxib_mol, canonical=False, slicer=\"attach\") print(safe_str) print(f\"Representation using {len(safe_str.split('.'))} fragments\") display(dm.to_image(safe_str)) <pre>C%19%20%17%24.c1%19c9c%15c%25c8c1%14.c1%25c5c%12nn1%26.C%18%217%12.F%18.F7.F%21.c1%26c%27c%22c4c%16c1%11.S=3=%1046.N%236%13.O=3.O=%10.[H]%17.[H]%24.[H]%20.[H]9.[H]%15.[H]5.[H]%27.[H]%22.[H]%13.[H]%23.[H]%16.[H]%11.[H]8.[H]%14\nRepresentation using 26 fragments\n</pre> In\u00a0[8]: Copied! <pre>def my_slicer(mol):\n\"\"\"Slice on non single bonds where at both atoms are in a distinct rings\"\"\"\n    for bond in mol.GetBonds():\n        if bond.GetBondType() == dm.SINGLE_BOND and not bond.IsInRing() and (bond.GetBeginAtom().IsInRing() and bond.GetEndAtom().IsInRing()):\n            yield (bond.GetBeginAtomIdx(), bond.GetEndAtomIdx())\n</pre> def my_slicer(mol):     \"\"\"Slice on non single bonds where at both atoms are in a distinct rings\"\"\"     for bond in mol.GetBonds():         if bond.GetBondType() == dm.SINGLE_BOND and not bond.IsInRing() and (bond.GetBeginAtom().IsInRing() and bond.GetEndAtom().IsInRing()):             yield (bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()) In\u00a0[9]: Copied! <pre>safe_str = sf.encode(celecoxib_mol, canonical=True, slicer=my_slicer)\nprint(safe_str)\nprint(f\"Representation using {len(safe_str.split('.'))} fragments\")\n</pre> safe_str = sf.encode(celecoxib_mol, canonical=True, slicer=my_slicer) print(safe_str) print(f\"Representation using {len(safe_str.split('.'))} fragments\") <pre>c14cc(C(F)(F)F)nn13.c13ccc(S(N)(=O)=O)cc1.Cc1ccc4cc1\nRepresentation using 3 fragments\n</pre> In\u00a0[10]: Copied! <pre># The above is equivalent to using the following SMARTS:\nsmart_slicer = [\"[r]-;!@[r]\"]\nsafe_str = sf.encode(celecoxib_mol, canonical=True, slicer=smart_slicer)\nprint(safe_str)\nprint(f\"Representation using {len(safe_str.split('.'))} fragments\")\n</pre> # The above is equivalent to using the following SMARTS: smart_slicer = [\"[r]-;!@[r]\"] safe_str = sf.encode(celecoxib_mol, canonical=True, slicer=smart_slicer) print(safe_str) print(f\"Representation using {len(safe_str.split('.'))} fragments\") <pre>c13cc(C(F)(F)F)nn14.c14ccc(S(N)(=O)=O)cc1.Cc1ccc3cc1\nRepresentation using 3 fragments\n</pre> In\u00a0[11]: Copied! <pre>safe_fragment = safe_str.split(\".\")\nsafe_fragment\n</pre> safe_fragment = safe_str.split(\".\") safe_fragment Out[11]: <pre>['c13cc(C(F)(F)F)nn14', 'c14ccc(S(N)(=O)=O)cc1', 'Cc1ccc3cc1']</pre> In\u00a0[12]: Copied! <pre># the following will fail\ndm.to_mol(safe_fragment[0])\n</pre> # the following will fail dm.to_mol(safe_fragment[0]) <pre>[14:10:13] SMILES Parse Error: unclosed ring for input: 'c13cc(C(F)(F)F)nn14'\n</pre> In\u00a0[13]: Copied! <pre># while this works\nsf.decode(safe_fragment[0], as_mol=True)\n</pre> # while this works sf.decode(safe_fragment[0], as_mol=True) Out[13]: In\u00a0[14]: Copied! <pre># if you want to keep the attachment points, then use remove_dummies=False\nsf.decode(safe_fragment[0], as_mol=True, remove_dummies=False)\n</pre> # if you want to keep the attachment points, then use remove_dummies=False sf.decode(safe_fragment[0], as_mol=True, remove_dummies=False) Out[14]: In\u00a0[15]: Copied! <pre>sf.to_image(safe_str)\n</pre> sf.to_image(safe_str) Out[15]: <p>There are 3 display modes for highlighting the fragments in a SAFE string. The difference between those modes is highlighted below using two different slicing algorithm.</p> <p>!!! danger \"Overlapping fragments\" Note that because some fragment might be matching overlapping substructure of the molecules (for example the same fragment appearing multiple time in the molecule), the highlighting might assigned the same color to these fragments.</p> In\u00a0[16]: Copied! <pre>from IPython.display import display\nfrom ipywidgets import widgets, HBox\n\ndef display_image(safe_str):\n    image_lasso = widgets.Image(value=sf.to_image(safe_str, highlight_mode=\"lasso\", legend=\"lasso mode\").data.encode(), format='svg+xml')\n    image_fill = widgets.Image(value=sf.to_image(safe_str, highlight_mode=\"fill\", legend=\"fill mode\").data.encode(), format='svg+xml')\n    image_color = widgets.Image(value=sf.to_image(safe_str, highlight_mode=\"color\", legend=\"color mode\").data.encode(), format='svg+xml')\n    hbox = HBox([image_lasso, image_fill, image_color])\n    display(hbox)\n</pre>  from IPython.display import display from ipywidgets import widgets, HBox  def display_image(safe_str):     image_lasso = widgets.Image(value=sf.to_image(safe_str, highlight_mode=\"lasso\", legend=\"lasso mode\").data.encode(), format='svg+xml')     image_fill = widgets.Image(value=sf.to_image(safe_str, highlight_mode=\"fill\", legend=\"fill mode\").data.encode(), format='svg+xml')     image_color = widgets.Image(value=sf.to_image(safe_str, highlight_mode=\"color\", legend=\"color mode\").data.encode(), format='svg+xml')     hbox = HBox([image_lasso, image_fill, image_color])     display(hbox) In\u00a0[17]: Copied! <pre># display for brics\nsafe_str_brics = sf.encode(celecoxib_mol, canonical=True, slicer=\"brics\")\ndisplay_image(safe_str_brics)\n</pre> # display for brics safe_str_brics = sf.encode(celecoxib_mol, canonical=True, slicer=\"brics\") display_image(safe_str_brics) <pre>HBox(children=(Image(value=b'&lt;svg xmlns=\"http://www.w3.org/2000/svg\" ...', format='svg+xml'), Image(value=b'&lt;s\u2026</pre> In\u00a0[18]: Copied! <pre># display with HR\nsafe_str_hr = sf.encode(celecoxib_mol, canonical=True, slicer=\"mmpa\")\ndisplay_image(safe_str_hr)\n</pre> # display with HR safe_str_hr = sf.encode(celecoxib_mol, canonical=True, slicer=\"mmpa\") display_image(safe_str_hr) <pre>HBox(children=(Image(value=b'&lt;svg xmlns=\"http://www.w3.org/2000/svg\" ...', format='svg+xml'), Image(value=b'&lt;s\u2026</pre> In\u00a0[19]: Copied! <pre>import datamol as dm\nimport safe as sf\nfrom rdkit import Chem\nfrom rdkit.Chem.Draw import rdDepictor\nfrom rdkit.Chem import rdChemReactions as rdr\nrdDepictor.SetPreferCoordGen(True)\n</pre> import datamol as dm import safe as sf from rdkit import Chem from rdkit.Chem.Draw import rdDepictor from rdkit.Chem import rdChemReactions as rdr rdDepictor.SetPreferCoordGen(True) In\u00a0[20]: Copied! <pre>smiles = ['c1ccccc1', 'OC', 'c1cc(*)ccc1', 'O(*)C', 'c1cc(*)ccc1.O(*)C']\nlegends = ['benzene', 'methanol', 'phenyl group', 'Methoxy group', 'composite']\ndm.viz.to_image([dm.to_mol(x) for x in smiles], legends=legends, n_cols=len(smiles), use_svg=True)\n</pre> smiles = ['c1ccccc1', 'OC', 'c1cc(*)ccc1', 'O(*)C', 'c1cc(*)ccc1.O(*)C'] legends = ['benzene', 'methanol', 'phenyl group', 'Methoxy group', 'composite'] dm.viz.to_image([dm.to_mol(x) for x in smiles], legends=legends, n_cols=len(smiles), use_svg=True) Out[20]: <p>In the example above, we can see that <code>phenol</code> can be represented as two fragments that can be connected given proper attachment point.</p> <p>To achieve this we are interested in attaching 2 fragments together (the <code>methoxy</code> and the <code>phenyl</code> groups). In RDKit, this can usually be achieved using chemical reactions. For convenience, we will prefer a standardized representation of attachment points that includes an atom mapping.</p> In\u00a0[21]: Copied! <pre>smiles = [ 'c1cc(*)ccc1.O(*)C', 'c1cc([*:1])ccc1.O([*:1])C'] #\ndm.viz.to_image([dm.to_mol(x) for x in smiles], n_cols=len(smiles), use_svg=True)\n</pre> smiles = [ 'c1cc(*)ccc1.O(*)C', 'c1cc([*:1])ccc1.O([*:1])C'] # dm.viz.to_image([dm.to_mol(x) for x in smiles], n_cols=len(smiles), use_svg=True) Out[21]: <p>To attach the two fragments, I can write a simple chemical transformation. Since smarts and smiles syntax do not mix very well when it comes to <code>*</code> I will assume an isotopic representation <code>[1*]</code> instead of <code>[*:1]</code></p> In\u00a0[22]: Copied! <pre>rxn = rdr.ReactionFromSmarts(\"[1*][*:1].[1*][*:2]&gt;&gt;[*:1][*:2]\")\nrxn\n</pre> rxn = rdr.ReactionFromSmarts(\"[1*][*:1].[1*][*:2]&gt;&gt;[*:1][*:2]\") rxn Out[22]: In\u00a0[23]: Copied! <pre># replace atom map by isotopes\nphenyl = \"c1cc([*:1])ccc1\".replace(\"[*:1]\", \"[1*]\")\nmethoxy = \"O([*:1])C\".replace(\"[*:1]\", \"[1*]\")\n\n# runreactions\nprod = rxn.RunReactants((dm.to_mol(phenyl), dm.to_mol(methoxy)))\nprod[0][0]\n</pre> # replace atom map by isotopes phenyl = \"c1cc([*:1])ccc1\".replace(\"[*:1]\", \"[1*]\") methoxy = \"O([*:1])C\".replace(\"[*:1]\", \"[1*]\")  # runreactions prod = rxn.RunReactants((dm.to_mol(phenyl), dm.to_mol(methoxy))) prod[0][0] Out[23]: <p>We can achieve the same result by using rdkit API in an slightly more tedious way.</p> In\u00a0[24]: Copied! <pre>replacement_sub =  Chem.MolFromSmarts(\"[1*]\")\nprod = Chem.ReplaceSubstructs(dm.to_mol(phenyl), replacement_sub, dm.to_mol(methoxy), replacementConnectionPoint=0)\nprod = dm.remove_dummies(prod[0], dummy=\"[1*]\")\nprod\n</pre> replacement_sub =  Chem.MolFromSmarts(\"[1*]\") prod = Chem.ReplaceSubstructs(dm.to_mol(phenyl), replacement_sub, dm.to_mol(methoxy), replacementConnectionPoint=0) prod = dm.remove_dummies(prod[0], dummy=\"[1*]\") prod <pre>[14:10:33] WARNING: not removing hydrogen atom without neighbors\n</pre> Out[24]: <p>But wait, could we attach the fragment using only the string operations on the smiles ?</p> <p>Well, it's not possible by trying to perform substring replacement, but recall we just said that <code>numbers in smiles represents connectivity points</code> ?</p> In\u00a0[25]: Copied! <pre>phenyl = \"c1cc([*:1])ccc1\"\nmethoxy = \"O([*:1])C\"\ncomposite = phenyl + \".\" + methoxy # c1cc([*:1])ccc1.O([*:1])C\ncompo = dm.to_mol(composite)\n</pre> phenyl = \"c1cc([*:1])ccc1\" methoxy = \"O([*:1])C\" composite = phenyl + \".\" + methoxy # c1cc([*:1])ccc1.O([*:1])C compo = dm.to_mol(composite) <p>Since <code>1</code> \"connectivity point\" is already present in the phenyl group. We need to start by opening a new connectivity point: <code>2</code></p> In\u00a0[26]: Copied! <pre>attached_composite = composite.replace(\"[*:1]\", \"2\")\ndm.to_mol(attached_composite)\n</pre> attached_composite = composite.replace(\"[*:1]\", \"2\") dm.to_mol(attached_composite) <pre>[14:10:35] SMILES Parse Error: syntax error while parsing: c1cc(2)ccc1.O(2)C\n[14:10:35] SMILES Parse Error: Failed parsing SMILES 'c1cc(2)ccc1.O(2)C' for input: 'c1cc(2)ccc1.O(2)C'\n</pre> <p>The previous line does not work because of violation in the smiles syntax. As we are not taking into account the branching bracket surrounding the attachment point.</p> <p>We could try to regenerate the smiles or scan the sequence and remove the brackets when it's possible, but we want to limit the operations to <code>str.replace</code>. So let's try again.</p> In\u00a0[27]: Copied! <pre>attached_composite = composite.replace(\"([*:1])\", \"2\").replace(\"[*:1]\", \"2\")\ndm.to_image(attached_composite, legends=[attached_composite])\n</pre> attached_composite = composite.replace(\"([*:1])\", \"2\").replace(\"[*:1]\", \"2\") dm.to_image(attached_composite, legends=[attached_composite])  Out[27]: <p>You can see that the phenol molecule is represented as two \"fragments\" <code>[Fragment1].[Fragment2]</code>. That is what SAFE is about.</p> <p>In summary, to build a SAFE string, we just need to follow the step below:</p> <p></p>"},{"location":"tutorials/getting-started.html#using-safe","title":"Using SAFE\u00b6","text":"<p>In the following we will highlight how to use SAFE and some of the properties of SAFE strings.</p>"},{"location":"tutorials/getting-started.html#encoding","title":"Encoding\u00b6","text":"<p>!!! info \"SAFE represents fragments\"</p> <pre><code>SAFE represents molecules as a set of N [Fragment_1].[Fragment_i].[Fragment_N]</code></pre>"},{"location":"tutorials/getting-started.html#decoding","title":"Decoding\u00b6","text":"<p>!!! info \"Fragment order in SAFE does not matter\"</p> <pre><code>Each `SAFE fragment` is a valid molecule itself, however, you need to use the decoder to recover molecules where all attachment point are not fullfiled.</code></pre>"},{"location":"tutorials/getting-started.html#displaying-a-safe-encoding","title":"Displaying a SAFE encoding\u00b6","text":"<p>We provide a visualization module to display a safe string, with highlight of all the fragments that compose it.</p>"},{"location":"tutorials/getting-started.html#understanding-safe","title":"Understanding SAFE\u00b6","text":"<p>The intuition behind safe is quite simple: we want to represent any molecule as a  <code>set of connected fragments</code>.</p>"},{"location":"tutorials/getting-started.html#preliminary-on-smiles","title":"Preliminary on SMILES.\u00b6","text":"<p>Let's start first by revisiting some information about the SMILES syntax:</p> <ul> <li><p>An asterisk <code>*</code> in a smiles is usually employed to indicate any atom OR an attachment point of any group. It's particularly useful for smarts matching.</p> </li> <li><p>Number in smiles syntax indicates connectivity points between two atoms. For 2 digits numbers they would need to be preceeded by <code>%</code>.</p> </li> </ul> <p>This is partially explained on the wikipedia ring section of SMILES.</p> <ul> <li>A dot <code>.</code> in smiles indicates the presence of additional fragments and is used to separate them.</li> </ul> <p>A good ressource on the subject is the DAYLIGHT page.</p> <p>We illustrate these informations below !</p>"}]}